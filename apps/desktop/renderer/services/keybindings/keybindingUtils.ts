/**
 * Keybinding Utilities
 *
 * Utility functions for keybinding normalization and processing.
 * This file is separate to avoid circular dependencies.
 */

import type { Platform } from './types.js';
import { getPlatform } from './types.js';

/**
 * Normalize a keybinding string to match the platform's modifier order
 * This ensures keybindings can be written intuitively (e.g., "Cmd+Shift+P")
 * but will match the order generated by eventToChord()
 *
 * @param key Keybinding string (e.g., "Cmd+Shift+P" or "Cmd+K Cmd+P")
 * @param platform Platform to normalize for (defaults to current platform)
 * @returns Normalized keybinding string (e.g., "Shift+Cmd+P" on Mac)
 */
export function normalizeKeybinding(key: string, platform?: Platform): string {
  const targetPlatform = platform || getPlatform();

  // Platform-specific modifier order (must match eventToChord in KeybindingService)
  const modifierOrder =
    targetPlatform === 'mac'
      ? ['Ctrl', 'Alt', 'Shift', 'Cmd']
      : ['Ctrl', 'Shift', 'Alt', 'Meta'];

  // Split by spaces to handle multi-chord sequences
  const chords = key.split(' ');

  const normalizedChords = chords.map((chord) => {
    // Split by + to get parts
    const parts = chord.split('+');
    if (parts.length === 1) {
      // Just a key, no modifiers
      return chord;
    }

    // Last part is the key, everything else is modifiers
    const keyPart = parts[parts.length - 1];
    const modifiers = parts.slice(0, -1);

    // Sort modifiers according to platform order
    const sortedModifiers = modifiers.sort((a, b) => {
      const indexA = modifierOrder.indexOf(a);
      const indexB = modifierOrder.indexOf(b);
      // If modifier not in order list, put it at the end
      if (indexA === -1 && indexB === -1) return 0;
      if (indexA === -1) return 1;
      if (indexB === -1) return -1;
      return indexA - indexB;
    });

    // Rejoin with +
    return [...sortedModifiers, keyPart].join('+');
  });

  // Rejoin chords with space
  return normalizedChords.join(' ');
}
