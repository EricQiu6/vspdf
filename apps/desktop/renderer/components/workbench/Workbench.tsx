import React, { useEffect, useReducer, useRef } from 'react';
import { ErrorBoundary } from '../ErrorBoundary';
import { viewerRegistry } from '../../services/ViewerRegistry';
import { StubViewer } from '../../viewers/StubViewer';
import { EditorGroup } from './EditorGroup';
import {
  editorAreaReducer,
  createInitialEditorState,
} from '../../services/EditorAreaReducer';
import styles from './Workbench.module.css';

/**
 * Workbench - Top-level layout orchestrator
 * Testing EditorGroup with hardcoded 3-tab group
 */
export function Workbench() {
  // Initialize reducer with empty state
  const [editorState, dispatch] = useReducer(editorAreaReducer, createInitialEditorState());

  // Prevent React 18 StrictMode double-invocation in development
  const isInitializedRef = useRef(false);

  useEffect(() => {
    // Guard: run initialization only once even in StrictMode
    if (isInitializedRef.current) return;
    isInitializedRef.current = true;

    // Register StubViewer for development
    viewerRegistry.register('stub', StubViewer);

    // Add 3 test tabs (IDs generated by reducer, duplicates prevented)
    const groupId = editorState.activeGroupId;
    dispatch({
      type: 'ADD_TAB',
      groupId,
      tab: { uri: 'file:///docs/attention.pdf', title: 'Attention Is All You Need', viewer: 'stub' },
    });
    dispatch({
      type: 'ADD_TAB',
      groupId,
      tab: { uri: 'file:///docs/resnet.pdf', title: 'ResNet Paper', viewer: 'stub' },
    });
    dispatch({
      type: 'ADD_TAB',
      groupId,
      tab: { uri: 'file:///docs/bert.pdf', title: 'BERT: Pre-training', viewer: 'stub' },
    });
  // Empty deps - we manage "run once" with useRef to handle StrictMode
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const activeGroup = editorState.groups[editorState.activeGroupId];

  const handleSelectTab = (tabIndex: number) => {
    dispatch({
      type: 'SET_ACTIVE_TAB',
      groupId: editorState.activeGroupId,
      tabIndex,
    });
  };

  const handleCloseTab = (tabIndex: number) => {
    dispatch({
      type: 'CLOSE_TAB',
      groupId: editorState.activeGroupId,
      tabIndex,
    });
  };

  const handleTabContextMenu = (event: React.MouseEvent, tabIndex: number) => {
    event.preventDefault();
    console.log('Context menu for tab', tabIndex);
    // Future: show context menu with options
  };

  const handleGroupClick = () => {
    // Already active, no-op for now
    console.log('Group clicked');
  };

  return (
    <div className={styles.workbench}>
      <ErrorBoundary
        fallback={
          <div style={{ padding: '2rem', color: '#f48771' }}>
            <h2>Workbench Error</h2>
            <p>The workbench encountered an error. Please reload the application.</p>
          </div>
        }
      >
        <div className={styles.editorAreaTest}>
          <EditorGroup
            groupState={activeGroup}
            isActive={true}
            onSelectTab={handleSelectTab}
            onCloseTab={handleCloseTab}
            onTabContextMenu={handleTabContextMenu}
            onGroupClick={handleGroupClick}
          />
        </div>
      </ErrorBoundary>
    </div>
  );
}
