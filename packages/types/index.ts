// Window augmentation for Electron API
declare global {
  interface Window {
    electronAPI: {
      fs: {
        read(filePath: string): Promise<Uint8Array>;
        write(filePath: string, data: Uint8Array): Promise<void>;
        listDir(
          dirPath: string
        ): Promise<Array<{ name: string; isDirectory: boolean; path: string }>>;
        stat(filePath: string): Promise<{
          size: number;
          isDirectory: boolean;
          isFile: boolean;
          mtime: string;
          ctime: string;
        }>;
      };
    };
  }
}

// Core domain types

export type GroupId = string;
export type ThreadId = string;
export type AnnotId = string;

// Input type for creating new tabs (no ID yet)
export interface DocTabInput {
  uri: string;
  title: string;
  viewer: 'stub' | 'pdf' | 'image' | 'text';
  state?: unknown; // Optional viewer state (zoom, page, scroll position, etc.)
}

// Stored tab type (ID added by reducer)
export interface DocTab extends DocTabInput {
  id: string; // Unique identifier generated by reducer
}

// Viewer types
export interface ViewerProps {
  uri: string;
  initialState?: unknown;
  onEvent: (ev: ViewerEvent) => void;
}

export interface ViewerHandle {
  focus(): void;
  getState(): unknown;
  dispose(): void;
  search?(q: string): void;
  zoomIn?(): void;
  zoomOut?(): void;
  goToPage?(n: number): void;
}

export type ViewerEvent =
  | { type: 'ready'; uri: string }
  | { type: 'stateChanged'; uri: string; state: unknown }
  | { type: 'capabilitiesChanged'; uri: string; capabilities: ViewerCapabilities }
  | { type: 'selectionChanged'; uri: string; anchors: AnchorInput[] }
  | { type: 'annotationClicked'; uri: string; annotId: AnnotId }
  | { type: 'error'; uri: string; error: string };

export interface ViewerCapabilities {
  canZoom?: boolean;
  canSearch?: boolean;
  canGoToPage?: boolean;
}

// Anchor types
export interface Quad {
  x1: number;
  y1: number;
  x2: number;
  y2: number;
  x3: number;
  y3: number;
  x4: number;
  y4: number;
}

export interface Rect {
  x: number;
  y: number;
  w: number;
  h: number;
}

export interface AnchorInput {
  page: number;
  quads?: Quad[];
  rect?: Rect;
}

// Thread and comment types
export interface Comment {
  id: string;
  author: string;
  time: string;
  raw: string;
}

export interface ThreadViewModel {
  docUri: string;
  threadId: ThreadId;
  comments: Comment[];
  anchors: Array<{ annotId: AnnotId; page: number }>;
}

// Event bus types
export type AppEvent =
  | { type: 'viewer.ready'; uri: string }
  | { type: 'viewer.selectionChanged'; uri: string; anchors: AnchorInput[] }
  | { type: 'viewer.annotationClicked'; uri: string; annotId: AnnotId }
  | { type: 'thread.updated'; uri: string; threadId: ThreadId };

// EditorArea operations API
export interface EditorAreaOperations {
  /**
   * Split active group, creating new group to the RIGHT
   * Original group stays on left, new empty group appears on right
   * @param groupId - Group to split
   * @note The newly created group is automatically focused
   */
  splitRight(groupId: string): void;

  /**
   * Split active group, creating new group to the LEFT
   * New empty group appears on left, original group moves to right
   * @param groupId - Group to split
   * @note The newly created group is automatically focused
   */
  splitLeft(groupId: string): void;

  /**
   * Split active group, creating new group BELOW
   * Original group stays on top, new empty group appears below
   * @param groupId - Group to split
   * @note The newly created group is automatically focused
   */
  splitDown(groupId: string): void;

  /**
   * Split active group, creating new group ABOVE
   * New empty group appears above, original group moves below
   * @param groupId - Group to split
   * @note The newly created group is automatically focused
   */
  splitUp(groupId: string): void;

  /**
   * Close a group and remove it from the layout tree
   * @param groupId - Group to close
   */
  closeGroup(groupId: string): void;

  /**
   * Open a file in a specific group (or active group if not specified)
   * @param uri - File URI to open
   * @param groupId - Optional group ID (defaults to active group)
   */
  openFile(uri: string, groupId?: string): void;

  /**
   * Set focus to a specific group
   * @param groupId - Group to focus
   */
  focusGroup(groupId: string): void;

  /**
   * Close a specific tab in a group
   * @param groupId - Group containing the tab
   * @param tabIndex - Index of tab to close
   */
  closeTab(groupId: string, tabIndex: number): void;

  /**
   * Move a tab from one group to another (or reorder within same group)
   * @param fromGroup - Source group ID
   * @param tabIndex - Index of tab in source group
   * @param toGroup - Destination group ID
   * @param toIndex - Optional destination index (defaults to end)
   */
  moveTab(fromGroup: string, tabIndex: number, toGroup: string, toIndex?: number): void;
}

// Command types
export interface CommandContext {
  viewer?: ViewerHandle & { capabilities?: ViewerCapabilities };
  selection?: AnchorInput[];
  thread?: ThreadViewModel;
  activeGroup?: GroupId;
  activeTab?: DocTab;
  activeTabIndex?: number;
  editorAreaOps?: EditorAreaOperations;
}

export interface Command {
  id: string;
  handler: (ctx: CommandContext) => void | Promise<void>;
  when?: (ctx: CommandContext) => boolean;
  keybinding?: string;
}

// Keybinding and Context types (for services)
export type ContextKeyValue = string | number | boolean | undefined;
export type ContextKeyMap = Record<string, ContextKeyValue>;

export interface Keybinding {
  id: string;
  commandId: string;
  key: string;
  mac?: string;
  win?: string;
  linux?: string;
  when?: string;
}

export interface Disposable {
  dispose(): void;
}

// Editor layout and state types
export type {
  LayoutTree,
  SplitNode,
  LeafNode,
  EditorAreaState,
  EditorGroupState,
  EditorAction,
  TabDragData,
} from './editor';

export { isTabDragData } from './editor';

export {};
