// Editor layout and state types for the EditorArea workbench component

import type { DocTab, DocTabInput } from './index';

/**
 * Layout tree structure for split panes
 * Discriminated union: either a split container or a leaf node
 */
export type LayoutTree = SplitNode | LeafNode;

/**
 * Split node: contains 2+ child nodes arranged in a direction
 */
export interface SplitNode {
  type: 'split';
  id: string; // Unique identifier for stable React keys
  direction: 'row' | 'column';
  sizes: number[]; // Proportional sizes (should sum to 1.0)
  children: LayoutTree[];
}

/**
 * Leaf node: references a single EditorGroup
 */
export interface LeafNode {
  type: 'leaf';
  groupId: string;
}

/**
 * Complete EditorArea state
 */
export interface EditorAreaState {
  layout: LayoutTree; // Tree structure of splits and groups
  groups: Record<string, EditorGroupState>; // All group data indexed by ID
  activeGroupId: string; // Currently focused group
}

/**
 * State for a single editor group (pane)
 */
export interface EditorGroupState {
  id: string;
  tabs: DocTab[];
  activeIndex: number; // -1 means no tabs
}

/**
 * All possible actions for the EditorArea reducer
 */
export type EditorAction =
  | {
      type: 'SPLIT_GROUP';
      groupId: string;
      direction: 'row' | 'column';
      position?: 'before' | 'after'; // 'before' = left/up, 'after' = right/down (default)
    }
  | { type: 'CLOSE_GROUP'; groupId: string }
  | { type: 'ADD_TAB'; groupId: string; tab: DocTabInput } // Input type - ID generated by reducer
  | { type: 'CLOSE_TAB'; groupId: string; tabIndex: number }
  | { type: 'SET_ACTIVE_TAB'; groupId: string; tabIndex: number }
  | { type: 'SET_ACTIVE_GROUP'; groupId: string }
  | {
      type: 'MOVE_TAB';
      fromGroupId: string;
      toGroupId: string;
      tabIndex: number;
      toIndex?: number;
    };

/**
 * Drag data contract for tab drag-and-drop
 * Used by @atlaskit/pragmatic-drag-and-drop
 */
export interface TabDragData {
  type: 'tab';
  groupId: string;
  tabIndex: number;
  tabId: string;
  title: string;
}

/**
 * Type guard for validating drag data from unknown sources
 * Prevents unsafe type assertions and runtime errors
 *
 * @example
 * if (!isTabDragData(source.data)) {
 *   console.warn('Invalid drag data');
 *   return;
 * }
 * const dragData = source.data; // Now safely typed
 */
export function isTabDragData(data: unknown): data is TabDragData {
  return (
    typeof data === 'object' &&
    data !== null &&
    'type' in data &&
    data.type === 'tab' &&
    'groupId' in data &&
    typeof data.groupId === 'string' &&
    'tabIndex' in data &&
    typeof data.tabIndex === 'number' &&
    'tabId' in data &&
    typeof data.tabId === 'string' &&
    'title' in data &&
    typeof data.title === 'string'
  );
}
